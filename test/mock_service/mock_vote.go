// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/vote.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVoteService is a mock of VoteService interface.
type MockVoteService struct {
	ctrl     *gomock.Controller
	recorder *MockVoteServiceMockRecorder
}

// MockVoteServiceMockRecorder is the mock recorder for MockVoteService.
type MockVoteServiceMockRecorder struct {
	mock *MockVoteService
}

// NewMockVoteService creates a new mock instance.
func NewMockVoteService(ctrl *gomock.Controller) *MockVoteService {
	mock := &MockVoteService{ctrl: ctrl}
	mock.recorder = &MockVoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoteService) EXPECT() *MockVoteServiceMockRecorder {
	return m.recorder
}

// ApplyVote mocks base method.
func (m *MockVoteService) ApplyVote(citizenID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyVote", citizenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyVote indicates an expected call of ApplyVote.
func (mr *MockVoteServiceMockRecorder) ApplyVote(citizenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyVote", reflect.TypeOf((*MockVoteService)(nil).ApplyVote), citizenID)
}

// CheckValidity mocks base method.
func (m *MockVoteService) CheckValidity(citizenID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckValidity", citizenID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckValidity indicates an expected call of CheckValidity.
func (mr *MockVoteServiceMockRecorder) CheckValidity(citizenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckValidity", reflect.TypeOf((*MockVoteService)(nil).CheckValidity), citizenID)
}
