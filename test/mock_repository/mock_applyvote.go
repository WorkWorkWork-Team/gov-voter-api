// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/applyvotemp.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/WorkWorkWork-Team/gov-voter-api/models"
	gomock "github.com/golang/mock/gomock"
)

// MockApplyVoteRepository is a mock of ApplyVoteRepository interface.
type MockApplyVoteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockApplyVoteRepositoryMockRecorder
}

// MockApplyVoteRepositoryMockRecorder is the mock recorder for MockApplyVoteRepository.
type MockApplyVoteRepositoryMockRecorder struct {
	mock *MockApplyVoteRepository
}

// NewMockApplyVoteRepository creates a new mock instance.
func NewMockApplyVoteRepository(ctrl *gomock.Controller) *MockApplyVoteRepository {
	mock := &MockApplyVoteRepository{ctrl: ctrl}
	mock.recorder = &MockApplyVoteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplyVoteRepository) EXPECT() *MockApplyVoteRepositoryMockRecorder {
	return m.recorder
}

// ApplyVote mocks base method.
func (m *MockApplyVoteRepository) ApplyVote(citizenID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyVote", citizenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyVote indicates an expected call of ApplyVote.
func (mr *MockApplyVoteRepositoryMockRecorder) ApplyVote(citizenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyVote", reflect.TypeOf((*MockApplyVoteRepository)(nil).ApplyVote), citizenID)
}

// GetApplyVoteByCitizenID mocks base method.
func (m *MockApplyVoteRepository) GetApplyVoteByCitizenID(citizenID string) (model.ApplyVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplyVoteByCitizenID", citizenID)
	ret0, _ := ret[0].(model.ApplyVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplyVoteByCitizenID indicates an expected call of GetApplyVoteByCitizenID.
func (mr *MockApplyVoteRepositoryMockRecorder) GetApplyVoteByCitizenID(citizenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplyVoteByCitizenID", reflect.TypeOf((*MockApplyVoteRepository)(nil).GetApplyVoteByCitizenID), citizenID)
}
