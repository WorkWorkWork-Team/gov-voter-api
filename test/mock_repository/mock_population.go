// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/population.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/WorkWorkWork-Team/gov-voter-api/models"
	gomock "github.com/golang/mock/gomock"
)

// MockPopulationRepository is a mock of PopulationRepository interface.
type MockPopulationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPopulationRepositoryMockRecorder
}

// MockPopulationRepositoryMockRecorder is the mock recorder for MockPopulationRepository.
type MockPopulationRepositoryMockRecorder struct {
	mock *MockPopulationRepository
}

// NewMockPopulationRepository creates a new mock instance.
func NewMockPopulationRepository(ctrl *gomock.Controller) *MockPopulationRepository {
	mock := &MockPopulationRepository{ctrl: ctrl}
	mock.recorder = &MockPopulationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPopulationRepository) EXPECT() *MockPopulationRepositoryMockRecorder {
	return m.recorder
}

// GetPopulationInfo mocks base method.
func (m *MockPopulationRepository) GetPopulationInfo(citizenID string) (model.Population, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopulationInfo", citizenID)
	ret0, _ := ret[0].(model.Population)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPopulationInfo indicates an expected call of GetPopulationInfo.
func (mr *MockPopulationRepositoryMockRecorder) GetPopulationInfo(citizenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopulationInfo", reflect.TypeOf((*MockPopulationRepository)(nil).GetPopulationInfo), citizenID)
}

// GetPopulationInfoBasedOnCitizenIDAndLazerID mocks base method.
func (m *MockPopulationRepository) GetPopulationInfoBasedOnCitizenIDAndLazerID(citizenID, lazerID string) (model.Population, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopulationInfoBasedOnCitizenIDAndLazerID", citizenID, lazerID)
	ret0, _ := ret[0].(model.Population)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPopulationInfoBasedOnCitizenIDAndLazerID indicates an expected call of GetPopulationInfoBasedOnCitizenIDAndLazerID.
func (mr *MockPopulationRepositoryMockRecorder) GetPopulationInfoBasedOnCitizenIDAndLazerID(citizenID, lazerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopulationInfoBasedOnCitizenIDAndLazerID", reflect.TypeOf((*MockPopulationRepository)(nil).GetPopulationInfoBasedOnCitizenIDAndLazerID), citizenID, lazerID)
}
